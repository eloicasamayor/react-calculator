{"version":3,"sources":["DigitButton.js","OperationButton.js","App.js","reportWebVitals.js","index.js"],"names":["DigitButton","dispatch","digit","onClick","type","ACTIONS","ADD_DIGIT","payload","OperationButton","operation","CHOOSE_OPERATION","CLEAR","DELETE_DIGIT","EVALUATE","reducer","state","overwrite","currentOperand","includes","previousOperand","evaluate","lenght","slice","prev","parseFloat","current","isNaN","computation","toString","INTEGER_FORMATTER","Intl","NumberFormat","maximumFractionDigits","formatOperand","operand","split","integer","decimal","format","App","useReducer","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43165e01.chunk.js","sourcesContent":["import { ACTIONS } from \"./App\";\r\n\r\nexport default function DigitButton({dispatch, digit}){\r\n    return (\r\n    <button onClick={()=> dispatch({type: ACTIONS.ADD_DIGIT, payload: {digit}})}>\r\n        {digit}\r\n    </button>\r\n    )\r\n}","import { ACTIONS } from \"./App\";\r\n\r\nexport default function OperationButton({dispatch, operation}){\r\n    return (\r\n    <button onClick={()=> dispatch({type: ACTIONS.CHOOSE_OPERATION, payload: {operation}})}>\r\n        {operation}\r\n    </button>\r\n    )\r\n}","import \"./styles.css\";\nimport DigitButton from \"./DigitButton\";\nimport OperationButton from \"./OperationButton\";\nimport { useReducer } from \"react\";\n\nexport const ACTIONS = {\n  ADD_DIGIT: 'add-digit',\n  CHOOSE_OPERATION: 'choose-operation',\n  CLEAR: 'clear',\n  DELETE_DIGIT: 'delete-digit',\n  EVALUATE: 'evaluate'\n}\n\nfunction reducer(state, { type, payload}){\n  switch(type){\n    case ACTIONS.ADD_DIGIT:\n      if(state.overwrite){\n        return {\n          ...state,\n          currentOperand: payload.digit,\n          overwrite: false,\n        }\n      }\n      if(payload.digit ===\"0\" && state.currentOperand === \"0\") return state\n      if(payload.digit ===\".\" && state.currentOperand.includes(\".\")) return state\n      \n      return {\n        ...state,\n        currentOperand: `${state.currentOperand || \"\"}${payload.digit}`\n      }\n    case ACTIONS.CLEAR:\n      return{}\n\n    case ACTIONS.EVALUATE:\n      if(state.operation == null || state.currentOperand == null || state.previousOperand == null){\n        return state\n      }\n      return {\n        ...state,\n        overwrite: true,\n        previousOperand: null,\n        operation: null,\n        currentOperand: evaluate(state)\n      }\n    \n    case ACTIONS.CHOOSE_OPERATION:\n      if(state.currentOperand == null && state.previousOperand ==null){\n        return state\n      }\n      if(state.currentOperand == null){\n        return{\n          ...state,\n          operation: payload.operation,\n        }\n      }\n\n      if(state.previousOperand == null){\n        return{\n          ...state,\n          operation: payload.operation,\n          previousOperand: state.currentOperand,\n          currentOperand: null,\n        }\n      }\n\n      return {\n        ...state,\n        previousOperand: evaluate(state),\n        operation: payload.operation,\n        currentOperand: null\n      }\n    \n    case ACTIONS.DELETE_DIGIT:\n      if(state.overwrite){\n        return{\n          ...state,\n          overwrite: false,\n          currentOperand: null\n        }\n      }\n      if(state.currentOperand == null) return state\n      if(state.currentOperand.lenght === 1){\n        return { ...state, currentOperand: null}\n      }\n      return {\n        ...state,\n        currentOperand: state.currentOperand.slice(0, -1)\n      }\n  }\n}\n\nfunction evaluate({currentOperand, previousOperand, operation}){\n  const prev = parseFloat(previousOperand)\n  const current = parseFloat(currentOperand)\n  if(isNaN(prev) || isNaN(current)) return \"\"\n  let computation = \"\"\n  switch(operation){\n    case \"+\":\n      computation = prev + current\n      break\n    case \"-\":\n        computation = prev - current\n        break\n    case \"*\":\n      computation = prev * current\n      break\n    case \"รท\":\n      computation = prev / current\n      break\n  }\n  return computation.toString()\n}\n\nconst INTEGER_FORMATTER = new Intl.NumberFormat(\"en-us\", {\n  maximumFractionDigits: 0,\n})\nfunction formatOperand(operand){\n  if(operand == null) return\n  const [integer, decimal] = operand.split('.')\n  if(decimal == null) return INTEGER_FORMATTER.format(integer)\n  return `${INTEGER_FORMATTER.format(integer)}.${decimal}`\n}\n\nfunction App() {\n  const [{ currentOperand, previousOperand, operation }, dispatch] = useReducer(\n    reducer, \n    {}\n    )\n  \n  return (\n    <div className=\"calculator-grid\">\n      <div className=\"output\">\n        <div className=\"previous-operand\">{formatOperand(previousOperand)} {operation}</div>\n        <div className=\"current-operand\">{formatOperand(currentOperand)}</div>\n      </div>\n      <button className=\"span-two\" onClick={() => dispatch({type: ACTIONS.CLEAR})}>AC</button>\n      <button onClick={() => dispatch({type: ACTIONS.DELETE_DIGIT})}>DEL</button>\n      <OperationButton operation=\"รท\" dispatch={dispatch} />\n      <DigitButton digit=\"1\" dispatch={dispatch} />\n      <DigitButton digit=\"2\" dispatch={dispatch} />\n      <DigitButton digit=\"3\" dispatch={dispatch} />\n      <OperationButton operation=\"*\" dispatch={dispatch} />\n      <DigitButton digit=\"4\" dispatch={dispatch} />\n      <DigitButton digit=\"5\" dispatch={dispatch} />\n      <DigitButton digit=\"6\" dispatch={dispatch} />\n      <OperationButton operation=\"+\" dispatch={dispatch} />\n      <DigitButton digit=\"7\" dispatch={dispatch} />\n      <DigitButton digit=\"8\" dispatch={dispatch} />\n      <DigitButton digit=\"9\" dispatch={dispatch} />\n      <OperationButton operation=\"-\" dispatch={dispatch} />\n      <DigitButton digit=\".\" dispatch={dispatch} />\n      <DigitButton digit=\"0\" dispatch={dispatch} />\n      <button className=\"span-two\" onClick={() => dispatch({type: ACTIONS.EVALUATE})}>=</button>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}